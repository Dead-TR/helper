'Стрічка \nіз переносом \n\t\tз табулятором' //Інструменти маніпуляції з стрічками \n\t
/*

Стрічка 
із переносом 
		з табулятором

*/

'Стрічка \"з лапками\", чи з \'апострофом\''	//Екранування \' \"
/*

Стрічка "з лапками", чи з 'апострофом'

*/

var str = "Тестова стрічка, метою якої є об'єм.";	//Приклад для подальших операцій:.


str.length //length -- рахує кількість символів.
	--36

str.charAt(0)	//charAt -- вертає конкретний юніт масиву. 
	--"Т"

str.substring(8,15) //Починаючи з восьмого символа, і аж до 15-го, substring буде виводити усі символи.
	--"стрічка"

str.slice(-15)	//slice аналогічний параметру вище, (start, end)
				//тільки додатково здатен приймати негативні значення,
				//за рахунок чого, може звертатися, одразу до кінця стрічки
	--"ю якої є об'єм."

str.substr(8,8)	//substr 
					//(перший юніт з якого почнеться обрахунок, 
					// і скільки юнітів будуть братися після нього);
	--"стрічка,"

str.indexOf('а')	//Шукає першу букву "а", 
					//й рахує в яка вона по порядку, й який має індекс. 
					//Вертає числове значення. (lastIndexOf -- Теж саме, лиш з кінця)]
 	--6

str.replace('метою', 'замінений текст')	//replace - замінює один юніт - іншим
	--"Тестова стрічка, замінений текст якої є об'єм."


str.split(' ') //split розбиває текст стрічки, на масив, використовуючи (' ') 
				//	/тут-пробіл/ як роздільник. 
				//Це дає змогу розбити речення на окремі слова, для маніпуляції з ними.
	-- ["Тестова", "стрічка,", "метою", "якої", "є", "об'єм."];


str.toUpperCase()
	--"ТЕСТОВА СТРІЧКА, МЕТОЮ ЯКОЇ Є ОБ'ЄМ."

str.toLowerCase()
	--"тестова стрічка, метою якої є об'єм."


console.log(str[4]);	// те ж саме, що й charAt, але не працює в старих браузерах
	--"о"

--------------------------------------------------------

includes – true/false если строка содержит подстроку
	str.includes("ZZZZ") === false
	str.includes("стрічка") === true


startsWith – true/false если строка начинается с подстроки
endsWith – true/false если строка заканчивается подстрокой
	str.startsWith('Тест') === true
	str.includes("стрічка") === false


localeCompare
-1 если строка стоит раньше подстроки в словаре
1 если строка стоит в словаре позже подстроки
0 если они равны
 console.log(
 'Abcde'.includes('bc') === true,     // содержит ли вообще
 'Abcde'.includes('bc', 2) === false, // содержит ли начиная с 2 позиции
   
 'Abcde'.indexOf('bc') === 1,         // позиция первого вхождения
 'Abcde'.indexOf('bc', 2) === -1,     // позиция начиная синдекса 2
   
 'Abcde'.lastIndexOf('bc') === 1,     // позиция последнего вхождения
   
 'Abcde'.startsWith('Ab') === true,   // arg является началом
 'Abcde'.endsWith('de') === true,     // arg является окончанием
   
 'Abcde'.localeCompare('aaa') === 1,  // arg стоит в словаре раньше
 );



 trim – убирает порбелы по краям
 - 	trimStart / trimLeft – убирает порбелы вначале
 -	trimEnd / trimRight – убирает порбелы вконце
 	console.log("Hello world!    ".trim()); == "Hello world!";



repeat – повторяет строку указанное число раз
	"Слово".repeat(3); === "СловоСловоСлово"


padStart – дополняет строку до нужной длинны символами в начале
padEnd – дополняет строку до нужной длинны символами в конце
	'4567'.padStart(10, '*') === '******4567',
    '4567'.padEnd(10, '*') === '4567******',