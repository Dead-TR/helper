.unit {
    display: grid;
    height: 100%;	// Вказує загальну висоту всього grid блоку
    grid-template-columns: 33% 33% 33%; //надає дочірнім елементам, кожному по 33% місця в блоці. Суворо! 
    grid-template-rows: 50px 50px; 		// -- кількість і розміри розмічених  рядів
    grid-template: 50px 50px / 33% 33% 33%; // короткий запис. спершу колонки, потім ряди

    grid-auto-rows: 150px;		// розмір нерозмічених вище рядів
    grid-column-gap: 10px; 		// вертикальні (колонки) відступи між елеметами таблиці (margin-left/-right)
    grid-row-gap: 10px; 		// горизонтальні (ряди) відступи між елеметами таблиці (margin-bottom/-top)
    	grid-gap: 10px;		 	//однакові відступи як по горизонталі, так і по вертикалі

     grid-template-columns: 1fr 2fr 1fr; //fr - Центральна колонка, вдвічі більша за бокові. Суворо!
     grid-template-columns: repeat(3, 1fr); // те ж саме, що й: (1fr 1fr 1fr);
     grid-template-columns: repeat(2, 1fr 2fr); // те ж саме, що й: (1fr 2fr 1fr 2fr);
     grid-template-columns: 100px repeat(2, 1fr); // те ж саме, що й: (100px 1fr 1fr);

     grid-template-columns: minmax(100px, 200px) 1fr 1fr; // перший елемент буде розтягуватись
     														до (:200px), якщо має місце, а якщо місця не має,
     														то він стискатиметься до (:100px).
     														Решта займатимуть по (:1fr) розмірів

    grid-auto-rows: minmax(100px, auto);	// мінімальна висота блоку (і всіх блоків в ряду) буде 100px,
    										//	та якщо контент блоку перевищить цей розмір, блок
    										// автоматично збільшиться до :auto
 	grid-auto-flow: column; // аналог: flex-direction; Задає суворе позиціонування.


 		//		**	Гнучке вирівнювання:
 	grid-template-columns: repeat(auto-fill, 150px); // розміщує в ряду, максимально можливу кількість блоків по 150px
 														//якщо вони не поміщаються -- переносить їх
	grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));	//	якщо розмір блоку стає нижчим 100px,
															//	він переносться
 		// auto-fill -- блоки намагаються займати увесь ряд
 		// auto-fit  -- блоки можуть залишати по собі вільне місце
  }

  .unit0 {
  	grid-column-start: 2; 	// Вказує, у якій клітинці, елемент мусить починатись
  	grid-column-end: 4; 	// Вказує, у якій клітинці, елемент мусить закінчитись
  	grid-column-end: -1; 	// кінець блоку -- на останній клітинці
  	grid-column: 1 / -1;	// Вказує стартову і кінцеву позиції. Даний запис розтягує блок на увесь екран

  	grid-row: 1; // елемент переноситься до першого ряду
  	grid-row: 2; // елемент переноситься до другого ряду

  	grid-column: auto/span 2; 	// -- блок займає два горизонталі слоти 
  	grid-row: auto/span 2; 		// -- блок займає два вертикальні слоти
  }


.контейнер {
	display: grid;
	grid-template-columns: 1fr 2fr 1fr;	// в одному ряду буде три блоки, центральний з яких, займатиме :2fr місця 
	grid-template-areas: 
	"element_a element_a element_a"
	"element_a element_b ."

	justify-items: start; 	// вказує горизонтальну позицію контенту всередині клітинки
		// значення stretch, розтягує вміст, на всю ширину клітинки
  	align-items: end; 		// вказує вертикальну  позицію контенту всередині клітинки
  		//stretch -- контент === уся клітинка
  		//	-self -- те ж саме, для конкретного блоку

    justify-content: center; //-- відцентровує усі клітинки
}

.елемент_0 {
	grid-area: element_a; // ім'я елемента, в системі grid
	width: 50px; // задає ширину контенту, всередині клітинки
}

.елемент_1 {
	grid-area: element_b;
}
